generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id           String       @id @default(uuid())
  oracleId     String
  name         String
  releasedAt   DateTime
  uri          String
  scryfallUri  String
  highresImage Boolean
  imageStatus  String
  artOnlyUri   String
  fullCardUri  String
  colors       String[]
  setId        String
  set          String
  setName      String
  setType      String
  setUri       String
  setSearchUri String
  artist       String
  artistIds    String[]
  borderColor  String
  frame        String
  fullArt      Boolean
  scryfallId   String       @unique
  quizzes      Quiz[]       @relation("QuizCards")
  answers      QuizAnswer[]

  @@index([name])
}


model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
}

model Quiz {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  completedAt  DateTime?
  formatId     String?       // Quiz format identifier
  seed         Int?          // Random seed for reproducible card selection
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards        Card[]        @relation("QuizCards")
  answers      QuizAnswer[]
}

model QuizAnswer {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  quizId       String
  cardId       String
  userAnswer   String
  isCorrect    Boolean
  timeSpent    Int?     // in milliseconds
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([quizId, cardId]) // Ensure one answer per card per quiz
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
